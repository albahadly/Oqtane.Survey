@namespace Oqtane.Survey
@inherits ModuleBase

@using System.Linq;
@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager
@*
    @using BlazorSimpleSurvey.Data;
    @inject AuthenticationStateProvider AuthenticationStateProvider
    @inherits OwningComponentBase<SimpleSurveyService>
*@
@strError
<RadzenCard Style="margin-bottom: 20px;">
    <div class="row">
        <div class="col-md-12">
            <div>Survey Name:</div>
            <RadzenTextBox @bind-Value="Survey.SurveyName" Style="width: 400px" />
            <br />
        </div>
    </div>
</RadzenCard>
<RadzenButton Click="UpdateSurvey"
              Text="Save" ButtonStyle="ButtonStyle.Success"
              Style="margin-bottom: 10px; width: 150px" />
@*@if (SelectedSurvey.SurveyId > 0)
    {
        <RadzenButton Click="DeleteSurveyDialog"
            ButtonStyle="ButtonStyle.Danger"
            Text="Delete"
            Style="margin-bottom: 10px; width: 150px" />
    }*@
@code {
    [Parameter] public Survey SelectedSurvey { get; set; }

    #region Control Definition
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "EditSurvey";

    // Title for the control
    public override string Title => "Edit Survey";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };
    #endregion

    string strError = "";
    Survey Survey = new Survey();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (Survey == null)
            {
                Survey = new Survey();
                Survey.ModuleId = ModuleState.ModuleId;
                Survey.SurveyName = "New Survey";
            }
        }
        catch (Exception ex)
        {
            if (Survey == null)
            {
                Survey = new Survey();
                Survey.SurveyId = -1;
            }

            await logger.LogError(ex, "Error Loading Survey {SurveyId} {Error}", Survey.SurveyId, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    async Task UpdateSurvey()
    {
        //SelectedSurvey.UserId = UserId;

        //try
        //{
        //    if (SelectedSurvey.Id == -1)
        //    {
        //        SelectedSurvey = await @Service.CreateSurveyAsync(SelectedSurvey);
        //    }
        //    else
        //    {
        //        SelectedSurvey = await @Service.UpdateSurveyAsync(SelectedSurvey);
        //    }

        //    dialogService.Close(SelectedSurvey);
        //}
        //catch (Exception ex)
        //{
        //    strError = ex.GetBaseException().Message;
        //}
    }

    @*async Task DeleteSurveyDialog() => await dialogService
         .OpenAsync("Delete Survey", ds =>
        @<RadzenCard Style="padding: 20px;">
            <p Style="margin-bottom: 10px;">Confirm?</p>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Yes" Click="DeleteSurvey"
                                  Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="No" Click="()=> ds.Close(false)"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
        </RadzenCard>);*@

    async Task DeleteSurvey()
    {
        //var result = await @Service.DeleteSurveyAsync(SelectedSurvey);

        //dialogService.Close(SelectedSurvey.Id);
        //dialogService.Close(SelectedSurvey.Id);
    }
}
