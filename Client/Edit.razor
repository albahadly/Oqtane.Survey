@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models

@namespace Oqtane.Survey
@inherits ModuleBase
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-12">
        <ActionLink Action="EditSurveyItem" Security="SecurityAccessLevel.Edit" IconName="plus" IconOnly="true"
                    Parameters="@($"id=-1")"
                    Text="New Survey Item" />
        <ActionLink Action="EditSurvey" Security="SecurityAccessLevel.Edit" IconName="pencil" IconOnly="true"
                    Text="Edit Survey" />
        <label>@Survey.SurveyName</label>
    </div>
</div>
<br />
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
@if (Survey.SurveyId > 0)
{
    <ActionDialog Header="Delete Survey"
                  Message="@("Are You Sure You Wish To Delete The Survey?")"
                  Action="Delete" Security="SecurityAccessLevel.Edit"
                  Class="btn btn-danger"
                  OnClick="@(async () => await DeleteSurvey())" />
}
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code {
    #region Control Definition
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "Add,Edit";

    // Title for the control
    public override string Title => "Manage Survey";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };
    #endregion

    Survey Survey = new Survey();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            // Must create a Survey, in the database,
            // if one does not already exist
            if (Survey == null)
            {
                Survey = new Survey();
                Survey.SurveyId = -1;
                Survey.ModuleId = ModuleState.ModuleId;
                Survey.SurveyName = "New Survey";

                Survey = await SurveyService.AddSurveyAsync(Survey);
                await logger.LogInformation("Survey Added {Survey}", Survey);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey for {ModuleState.ModuleId} {Error}", ModuleState.ModuleId, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    #region private async Task Save()
    private async Task Save()
    {
        try
        {
            Survey SaveSurvey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (SaveSurvey == null)
            {
                SaveSurvey = new Survey();
                SaveSurvey.ModuleId = ModuleState.ModuleId;
                SaveSurvey.SurveyName = Survey.SurveyName;
                SaveSurvey = await SurveyService.AddSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Added {Survey}", SaveSurvey);
            }
            else
            {
                SaveSurvey.SurveyName = Survey.SurveyName;
                await SurveyService.UpdateSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Updated {Survey}", SaveSurvey);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Survey {Error}", ex.Message);
            AddModuleMessage("Error Saving Survey", MessageType.Error);
        }
    }
    #endregion

    #region private async Task DeleteSurvey()
    private async Task DeleteSurvey()
    {
        try
        {
            await SurveyService.DeleteSurveyAsync(ModuleState.ModuleId);
            await logger.LogInformation("Survey Deleted {Survey}", Survey);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Survey {Survey} {Error}", Survey, ex.Message);
            AddModuleMessage("Error Deleting Survey", MessageType.Error);
        }
    }
    #endregion
}
