@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models

@namespace Oqtane.Survey
@inherits ModuleBase
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager

@*<RadzenButton ButtonStyle="ButtonStyle.Success"
              Style="vertical-align:top"
              Size="Radzen.ButtonSize.Medium"
              Icon="add"
              MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text= "New Survey Item" }))"
              Click="@(args =>
                                  dialogService.Open<EditSurveyItem>($"New Survey Item",
                                  new Dictionary<string, object>() { { "SelectedSurveyItem", new SurveyItem() { Id = -1 } } },
                                  new DialogOptions() { Width = "500px", Height = "380px" }))" />

<RadzenButton ButtonStyle="ButtonStyle.Secondary"
              Style="vertical-align:top"
              Size="Radzen.ButtonSize.Medium"
              MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text= "Edit Survey" }))"
              Icon="edit" Click="@(args =>
                                  dialogService.Open<EditSurvey>($"Edit Survey",
                                  new Dictionary<string, object>() { { "SelectedSurvey", Survey } },
                                  new DialogOptions() { Width = "500px", Height = "280px" }))" />*@

<ActionLink Action="EditSurvey" Security="SecurityAccessLevel.Edit" IconName="pencil" IconOnly="true"          
            Text="Edit Survey" />

<ActionLink Action="EditSurveyItem" Security="SecurityAccessLevel.Edit" IconName="plus" IconOnly="true" 
            Parameters="@($"id=-1")"
            Text="Edit Survey Item" />

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="surveyname" HelpText="Enter a name">Survey Name: </Label>
        </td>
        <td>
            <input id="surveyname" class="form-control" @bind="@Survey.SurveyName" />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code {
    #region Control Definition
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "Add,Edit";

    // Title for the control
    public override string Title => "Manage Survey";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    }; 
    #endregion

    Survey Survey = new Survey();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (Survey == null)
            {
                Survey = new Survey();
                Survey.ModuleId = ModuleState.ModuleId;
                Survey.SurveyName = "New Survey";
            }
        }
        catch (Exception ex)
        {
            if (Survey == null)
            {
                Survey = new Survey();
                Survey.SurveyId = -1;
            }

            await logger.LogError(ex, "Error Loading Survey {SurveyId} {Error}", Survey.SurveyId, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    #region private async Task Save()
    private async Task Save()
    {
        try
        {
            Survey SaveSurvey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (SaveSurvey == null)
            {
                SaveSurvey = new Survey();
                SaveSurvey.ModuleId = ModuleState.ModuleId;
                SaveSurvey.SurveyName = Survey.SurveyName;
                SaveSurvey = await SurveyService.AddSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Added {Survey}", SaveSurvey);
            }
            else
            {
                SaveSurvey.SurveyName = Survey.SurveyName;
                await SurveyService.UpdateSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Updated {Survey}", SaveSurvey);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Survey {Error}", ex.Message);
            AddModuleMessage("Error Saving Survey", MessageType.Error);
        }
    }
    #endregion

}