@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models

@namespace Oqtane.Survey
@inherits ModuleBase
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="surveyname" HelpText="Enter a name">Survey Name: </Label>
        </td>
        <td>
            <input id="surveyname" class="form-control" @bind="@_surveyname" />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
@if (PageState.Action == "Edit")
{
    <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
}

@code {
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "Add,Edit";

    // Title for the control
    public override string Title => "Manage Survey";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _surveyname;
    string _createdby;
    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                Survey Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);
                if (Survey != null)
                {
                    _id = Survey.SurveyId;
                    _surveyname = Survey.SurveyName;
                    _createdby = Survey.CreatedBy;
                    _createdon = Survey.CreatedOn;
                    _modifiedby = Survey.ModifiedBy;
                    _modifiedon = Survey.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey {SurveyId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            Survey Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (Survey == null)
            {
                Survey = new Survey();
                Survey.ModuleId = ModuleState.ModuleId;
                Survey.SurveyName = _surveyname;
                Survey = await SurveyService.AddSurveyAsync(Survey);
                await logger.LogInformation("Survey Added {Survey}", Survey);
            }
            else
            {
                Survey.SurveyName = _surveyname;
                await SurveyService.UpdateSurveyAsync(Survey);
                await logger.LogInformation("Survey Updated {Survey}", Survey);
            }
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Survey {Error}", ex.Message);
            AddModuleMessage("Error Saving Survey", MessageType.Error);
        }
    }
}
